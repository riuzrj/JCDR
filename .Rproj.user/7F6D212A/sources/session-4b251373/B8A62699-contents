# Parallelize Stuff
#=========================#
library(dimRed)
require(MASS)
library(parallel)
library(datamicroarray)
library(dplyr)
library(smotefamily)

file_source <- list.files('/Users/ruijuanzhong/spp/docs/lolR')
for (i in 1:length(file_source)) {
  file_source[i] <- paste('/Users/ruijuanzhong/spp/docs/lolR/',file_source[i],sep ="")}
sapply(file_source,source)

no_cores = detectCores()
classifier.name <- "lda"
classifier.alg <- MASS::lda
classifier.return = 'class'

rlen <- 50

# Setup Algorithms
#==========================#
# algs <- list(lol.project.pca, lol.project.lrlda, lol.project.lrcca, lol.project.rp, lol.project.pls,
#              lol.project.lol)
# names(algs) <- c("PCA", "LRLDA", "CCA", "RP", "PLS", "LOL")
# alg.opts=list(list(), list(), list(), list(), list(), list(), list(second.moment="quadratic"))
# names(alg.opts) <- c("PCA", "LRLDA", "CCA", "RP", "PLS", "LOL", "QOL")

#data load
#data('yeoh', package = 'datamicroarray')
#data('burczynski', package = 'datamicroarray')
#data('gravier', package = 'datamicroarray')
#data('nakayama', package = 'datamicroarray')
#data('chowdary', package = 'datamicroarray')
#data('chin', package = 'datamicroarray')
#data('gordon', package = 'datamicroarray')
#data('singh', package = 'datamicroarray')
#data('alon', package = 'datamicroarray')
#data('west', package = 'datamicroarray')
#data('tian', package = 'datamicroarray')
data('sun', package = 'datamicroarray')
table(Y)

Y = sun$y
X = sun$x
#去掉缺失值所在列
X = X[,colSums(is.na(X)) == 0]
#使用 SMOTE 来对样本量少的类进行过采样
X = as.data.frame(X)
Y = as.factor(Y)
astrocytomas <- which(Y == "astrocytomas")
gendata = SMOTE(X,Y,K = 7, dup_size = 1)
num = ncol(gendata$data)
X = gendata$data[,-num]
Y = gendata$data[,num]
gendata_1 = SMOTE(X,Y,K = 7, dup_size = 1)
num_1 = ncol(gendata_1$data)
X = gendata_1$data[,-num_1]
Y = gendata_1$data[,num_1]
table(Y)
#从glioblastomas类中不重复得随机抽取 25 个样本
# set.seed(123)
# glioblastomas <- which(Y == "glioblastomas")
# glioblastomas <- sample(glioblastomas, 30)
# #从oligodendrogliomas类中随机抽取 25 个样本
# oligodendrogliomas <- which(Y == "oligodendrogliomas")
# oligodendrogliomas <- sample(oligodendrogliomas, 30)
# #将重新抽取的样本和原来两类astrocytomas和non-tumor的样本总和起来生成新的数据
# X <- rbind(X[glioblastomas, ], X[oligodendrogliomas, ],
#            X[Y == "astrocytomas", ], X[Y == "non-tumor", ])
# Y <- factor(c(rep("glioblastomas", 30), rep("oligodendrogliomas", 30),
#               rep("astrocytomas", sum(Y == "astrocytomas")),
#               rep("non-tumor", sum(Y == "non-tumor"))))
# data = read.csv('/Users/ruijuanzhong/Project/Real_data/Breast_GSE45827.csv')
# data = data[,-1]
# X = data[,2:ncol(data)]
# Y = data[,1]
# data = t(data)
# data = data[-1,]
# X = data[,2:ncol(data)]
# X <- matrix(as.numeric(X), nrow = nrow(X), ncol = ncol(X))
# dim(X)
# Y = data[,1]

# Y = tian$y
# X = tian$x

# Y = west$y
# X = west$x

# Y = alon$y
# X = alon$x

# Y = singh$y
# X = singh$x

# Y = gordon$y
# X = gordon$x

# Y = chin$y
# X = chin$x

# Y = chowdary$y
# X = chowdary$x

# Y = gravier$y
# X = gravier$x

# Y = burczynski$y
# X = burczynski$x

# Y = nakayama$y
# X = nakayama$x
# class_counts <- table(Y)
#
# # 找出样本量为 3 的类
# classes_to_remove <- names(class_counts[class_counts == 3])
#
# # 删除这些类
# X <- X[!(Y %in% classes_to_remove), ]
# Y <- Y[!(Y %in% classes_to_remove)]
# Y <- factor(Y)
# table(Y)
#打印出 Y 值的所有取值,按照Y的level顺序来打印

# Y = yeoh$y
# X = yeoh$x

# category_counts <- table(Y)
# total_count <- sum(category_counts)
# category_proportions <- category_counts / total_count
# print(category_proportions)

#remove samples with proportion < 0.1
# 从数据集中删除 "BCR" 和 "MLL" 类别的样本
# x_filtered <- yeoh$x[!(yeoh$y %in% c("BCR", "MLL")), ]
# y_filtered <- yeoh$y[!(yeoh$y %in% c("BCR", "MLL"))]
# X = as.matrix(x_filtered)
# Y = as.factor(y_filtered)

# x_filtered <- sun$x[!(sun$y %in% c("astrocytomas")), ]
# y_filtered <- sun$y[!(sun$y %in% c("astrocytomas"))]
# X = as.matrix(x_filtered)
# X = X[,colSums(is.na(X)) == 0]
# Y = as.factor(y_filtered)


#k = 'loo'  # number of folds
k = 10
sets <- lol.xval.split(X, Y, k=k, rank.low=TRUE)

algs <- list(spp)
names(algs) <- c("pca+pls")
alg.opts=list(list(method='pca+pls'))
names(alg.opts) <- c("pca+pls")
# algs <- list(lol.project.pca, lol.project.lrlda, spp, lol.project.pls,
#              lol.project.lol, spp)
# names(algs) <- c("PCA", "rrLDA", 'Naive_pca-pls', 'PLS', 'LOL', 'pca+pls')
# alg.opts=list(list(), list(), list(method='xi'), list(), list(), list(method='pca+pls'))
# names(alg.opts) <- c("PCA", "rrLDA", 'Naive_pca-pls', 'PLS', 'LOL', 'pca+pls')


# algs <- list(spp)
# names(algs) <- c("xi")
# alg.opts=list(list(method= 'mvi'))
# names(alg.opts) <- c("xi")
#
# algs <- list(lol.project.pls, lol.project.lol)
# names(algs) <- c("PLS", "LOL")
# alg.opts=list(list(), list())
# names(alg.opts) <- c("PLS", "LOL")

experiments <- list()
counter <- 1

X <- as.matrix(X); Y <- as.factor(Y)

n <- dim(X)[1]; d <- dim(X)[2]

len.set <- sapply(sets, function(set) length(set$train))
#max.r <- min(c(d - 1, min(len.set) - 1))
max.r <- 50
n <- length(Y)
x.n <- dim(X)[1]
if (n != x.n) {
  stop(sprintf("Your X has %d examples, but you only provide %d labels.", x.n, n))
}

# opath <- '/Users/ruijuanzhong/Project/lol.pro/data/singh_data/'
# dir.create(opath)

log.seq <- function(from=0, to=15, length=rlen) {
  round(exp(seq(from=log(from), to=log(to), length.out=length)))
}

rs <- unique(log.seq(from=1, to=max.r, length=rlen))
#print(length(rs))
#print(rs)
results <- data.frame(exp=c(), alg=c(), xv=c(), n=c(), ntrain=c(), d=c(), K=c(), fold=c(), r=c(), lhat=c(), Yhat=c(), Y=c())
for (i in 1:length(algs)) {
  classifier.ret <- classifier.return
  if (classifier.name == "lda") {
    classifier.ret = "class"
    classifier.alg = MASS::lda
    if (names(algs)[i] == "QOQ") {
      classifier.alg=MASS::qda
      classifier.ret = "class"
    } else if (names(algs)[i] == "CCA") {
      classifier.alg = lol.classify.nearestCentroid
      classifier.ret = NaN
    }
  }
  tryCatch({
    xv_res <- lol.xval.optimal_dimselect(X, Y, rs, algs[[i]], sets=sets,
                                         alg.opts=alg.opts[[names(algs)[i]]], alg.return="A", classifier=classifier.alg,
                                         classifier.return=classifier.ret, k=k)
    results <- rbind(results, data.frame(sim='nakayama', fold=xv_res$folds.data$fold, alg=names(algs)[i],
                                         r=xv_res$folds.data$r, lhat=xv_res$folds.data$lhat,
                                         Yhat=xv_res$folds.data$Yhat, Y=xv_res$folds.data$Y))
  }, error=function(e) {print(e); return(NULL)})
}

# classifier <- "RandomGuess"
# model <- do.call(classifier.algs[[classifier]], list(X[sets[[1]]$train, ], factor(Y[sets[[1]]$train], levels=unique(Y[sets[[1]]$train]))))
# results <- rbind(results, data.frame(exp=taskname, alg=algs, xv=k, n=n, ntrain=length(sets[[1]]$train), d=d, K=length(unique(Y)),
#                                      fold=fold$fold, r=NaN, lhat=1 - max(model$priors), repo=dat$repo))
#
# results <- results[complete.cases(results$lhat),]
#
# saveRDS(results, file=paste(opath, taskname, '_', fold$fold, '.rds', sep=""))
#return(results)

#time.after=Sys.time()

resultso <- do.call(rbind, results)
resultso_1 <- t(resultso)
resultso_1 <- as.data.frame(resultso_1)
resultso_1$lhat <- as.numeric(resultso_1$lhat)
filterd_results <- resultso_1 %>%
  group_by(sim, alg, r) %>%
  summarize(lhat = mean(lhat))
#把resultso_1 数据中r=33的数据筛选出来,并且只保留 Yhat 和 Y 两列
filterd_results_3 <- resultso_1 %>%
  filter(r == 29) %>%
  dplyr::select(Yhat, Y)
#存到 csv 文件中，地址自定义
write.csv(filterd_results_3, file = "/Users/ruijuanzhong/Project/aug_sun_YhatY_29.csv", row.names = FALSE)
